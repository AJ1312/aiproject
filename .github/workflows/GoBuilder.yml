name: Build CLI-TOP Binary

on:
  push:
    branches:
      - main
      - release
  pull_request:
    types: [closed]
    branches:
      - main
      - release
  workflow_dispatch:

jobs:
  build-linux:
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'dev')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Install dependencies
        run: |
          go mod tidy
          go get .

      - name: Build
        run: |
          CGO_ENABLED=0 go build -trimpath -ldflags "-s -w" -o ./build/linux/ -v ./...
          chmod +x ./build/linux/cli-top

      - name: Upload Linux Binary
        uses: actions/upload-artifact@v4
        with:
          name: cli-top-linux
          path: ./build/linux/cli-top

  build-windows:
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'dev')
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Install dependencies
        run: |
          go mod tidy
          go get .

      - name: Build Windows Executable
        run: |
          mkdir build\windows
          $env:GOOS = "windows"
          $env:GOARCH = "amd64"
          $env:CGO_ENABLED = "0"
          go build -trimpath -ldflags "-s -w" -o build\windows\cli-top.exe .

      - name: Install Inno Setup
        run: |
          Invoke-WebRequest -Uri https://jrsoftware.org/download.php/is.exe -OutFile is.exe
          Start-Process -FilePath is.exe -Args '/VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP- /LOG="install.log"' -Wait
          Remove-Item is.exe -Force

      - name: Extract Version for Installer
        id: extract_version
        shell: pwsh
        run: |
          $line = Get-Content -Path './debug/debug.go' | Select-String -Pattern 'var Version string ='
          if ($line -match 'var Version string = "(.*)"') {
              $version = $matches[1]
              echo "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          } else {
              Write-Error "Version not found in debug.go"
              exit 1
          }

      - name: Create Inno Setup Script
        run: |
          $installerScript = @'
          [Setup]
          AppName=CLI-TOP
          AppVersion=${{ steps.extract_version.outputs.version }}
          DefaultDirName={localappdata}\CLI-TOP
          DefaultGroupName=CLI-TOP
          OutputBaseFilename=cli-top-installer-${{ steps.extract_version.outputs.version }}
          Compression=lzma
          SolidCompression=yes
          PrivilegesRequired=lowest

          [Files]
          Source: "build\windows\cli-top.exe"; DestDir: "{app}"; Flags: ignoreversion

          [Code]
          function SplitString(const S: string; const Delimiter: char): TArrayOfString;
          var
            i, n, Count: Integer;
            part: String;
          begin
            Count := 1;
            for i := 1 to Length(S) do
              if S[i] = Delimiter then
                Inc(Count);
            SetArrayLength(Result, Count);
            n := 0;
            part := '';
            for i := 1 to Length(S) do
            begin
              if S[i] = Delimiter then
              begin
                Result[n] := part;
                part := '';
                Inc(n);
              end
              else
                part := part + S[i];
            end;
            Result[n] := part;
          end;

          function RemoveCliTopPaths(s: string): string;
          var
            i: integer;
            SplitPaths: TArrayOfString;
            CleanPaths: string;
          begin
            SplitPaths := SplitString(s, ';');
            CleanPaths := '';
            for i := 0 to GetArrayLength(SplitPaths)-1 do
            begin
              if (Pos('cli-top', LowerCase(SplitPaths[i])) = 0) and (Trim(SplitPaths[i]) <> '') then
              begin
                if CleanPaths <> '' then
                  CleanPaths := CleanPaths + ';';
                CleanPaths := CleanPaths + SplitPaths[i];
              end;
            end;
            Result := CleanPaths;
          end;

          const
            HWND_BROADCAST_CUSTOM = $FFFF; 
            WM_SETTINGCHANGE = $1A;

          function SendMessageTimeoutA(hwnd: LongWord; msg: LongWord; wParam: LongWord;
                                      lParam: PAnsiChar; flags: LongWord;
                                      uTimeout: LongWord; var lpdwResult: LongWord): LongWord;
            external 'SendMessageTimeoutA@user32.dll stdcall';

          procedure RefreshEnvironment;
          var
            ResultValue: LongWord;
            EnvironmentStr: AnsiString; 
          begin
            EnvironmentStr := 'Environment';
            if SendMessageTimeoutA(
                 HWND_BROADCAST_CUSTOM, WM_SETTINGCHANGE, 0, PAnsiChar(EnvironmentStr),
                 $2, 5000, ResultValue
               ) = 0 then
            begin
              MsgBox('Failed to refresh environment variables.', mbError, MB_OK);
            end;
          end;

          procedure UpdatePath;
          var
            Path: string;
            RegKey: string;
          begin
            RegKey := 'Environment';
            if not RegQueryStringValue(HKCU, RegKey, 'Path', Path) then
              Path := '';
            Path := RemoveCliTopPaths(Path);
            if Pos(ExpandConstant('{app}'), Path) = 0 then
            begin
              if Path <> '' then
                Path := Path + ';';
              Path := Path + ExpandConstant('{app}');
              if not RegWriteStringValue(HKCU, RegKey, 'Path', Path) then
                MsgBox('Failed to update PATH variable.', mbError, MB_OK);
            end;
            RefreshEnvironment;
          end;

          procedure CurStepChanged(CurStep: TSetupStep);
          begin
            if CurStep = ssPostInstall then
            begin
              UpdatePath;
              MsgBox('CLI-TOP has been installed successfully. Please open a new Command Prompt window to use the CLI-TOP command.',
                     mbInformation, MB_OK);
            end;
          end;
          '@
          Set-Content -Path installer.iss -Value $installerScript -Encoding UTF8NoBOM

      - name: Show Inno Setup Script (Debugging)
        shell: pwsh
        run: Get-Content installer.iss

      - name: Compile Installer
        shell: pwsh
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "installer.iss"

      - name: Verify Installer Generation
        shell: pwsh
        run: |
          if (!(Test-Path -Path "./Output/cli-top-installer-${{ steps.extract_version.outputs.version }}.exe")) {
              Write-Error "Installer file not found: ./Output/cli-top-installer-${{ steps.extract_version.outputs.version }}.exe"
              exit 1
          }

      - name: Upload Windows Executable
        uses: actions/upload-artifact@v4
        with:
          name: cli-top-windows
          path: ./build/windows/cli-top.exe

      - name: Upload Windows Installer
        uses: actions/upload-artifact@v4
        with:
          name: cli-top-windows-installer
          path: ./Output/cli-top-installer-${{ steps.extract_version.outputs.version }}.exe

  build-mac:
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'dev')
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Install dependencies
        run: |
          go mod tidy
          go get .

      - name: Build MacOS Binary
        run: |
          mkdir -p build/macos
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -trimpath -ldflags "-s -w" -o build/macos/cli-top .
          chmod +x build/macos/cli-top

      - name: Upload MacOS Binary
        uses: actions/upload-artifact@v4
        with:
          name: cli-top-macos
          path: ./build/macos/cli-top

  build-android:
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'dev')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Install dependencies
        run: |
          go mod tidy
          go get .

      - name: Build Android Binary
        run: |
          mkdir -p build/android
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -trimpath -ldflags "-s -w" -o build/android/cli-top .
          chmod +x build/android/cli-top

      - name: Upload Android Binary
        uses: actions/upload-artifact@v4
        with:
          name: cli-top-android
          path: ./build/android/cli-top
